{"uid":"5f48177b7009c9cc","name":"Авторизация на странице Login Page","fullName":"tests.test_login_page#test_log_in_invalid_extended","historyId":"5d147b1e5b9f8169c2aa907c0c69618f","time":{"start":1744963239021,"stop":1744963250533,"duration":11512},"description":"\n    Цель: Проверить авторизацию с некорректными данными\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть страницу с формой\n        2. Ввести данные в поле \"Username\"\n        3. Ввести данные в поле \"Password\"\n        4. Ввести данные в поле \"Username *\"\n        5. Кликнуть в пустую часть страницы\n        6. Проверить, что отображаются сообщения о некорректном вводе\n\n    Ожидаемый результат:\n        - Отображаются соответствующие сообщения об ошибке\n        - Кнопка \"Login\" не активна","descriptionHtml":"<pre><code>Цель: Проверить авторизацию с некорректными данными\n\nПредусловие:\n    - Открыть браузер\n\nШаги:\n    1. Открыть страницу с формой\n    2. Ввести данные в поле &quot;Username&quot;\n    3. Ввести данные в поле &quot;Password&quot;\n    4. Ввести данные в поле &quot;Username *&quot;\n    5. Кликнуть в пустую часть страницы\n    6. Проверить, что отображаются сообщения о некорректном вводе\n\nОжидаемый результат:\n    - Отображаются соответствующие сообщения об ошибке\n    - Кнопка &quot;Login&quot; не активна\n</code></pre>\n","status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'send_keys'","statusTrace":"browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"cd5f97ade5144fce7b21d3065181dc48\")>\nusername = 'abcdefg', password = 'ab', username_desc = 'ab'\nusername_error = False, password_error = True, username_desc_error = True\n\n    @allure.severity(severity_level.CRITICAL)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Авторизация\")\n    @allure.testcase(\"Задачи U1, U2\")\n    @allure.story(\"Авторизация с некорректными данными с проверкой ошибок\")\n    @allure.title(\"Авторизация на странице Login Page\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверить авторизацию с некорректными данными\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть страницу с формой\n            2. Ввести данные в поле \"Username\"\n            3. Ввести данные в поле \"Password\"\n            4. Ввести данные в поле \"Username *\"\n            5. Кликнуть в пустую часть страницы\n            6. Проверить, что отображаются сообщения о некорректном вводе\n    \n        Ожидаемый результат:\n            - Отображаются соответствующие сообщения об ошибке\n            - Кнопка \"Login\" не активна\"\"\")\n    @pytest.mark.parametrize('username, password, username_desc, username_error, password_error, username_desc_error',\n                             [('ab', 'abcdefg', 'abcdefg', True, False, False),\n                              ('abcdefg', 'ab', 'abcdefg', False, True, False),\n                              ('abcdefg', 'abcdefg', 'ab', False, False, True),\n                              ('abcdefg', 'ab', 'ab', False, True, True),\n                              ('ab', 'abcdefg', 'ab', True, False, True),\n                              ('ab', 'ab', 'abcdefg', True, True, False),\n                              ('ab', 'ab', 'ab', True, True, True)])\n    def test_log_in_invalid_extended(browser: fixture, username: str, password: str, username_desc: str,\n                                     username_error: bool, password_error: bool, username_desc_error: bool):\n        login_page = LoginPage(browser)\n        login_page.open_login_page()\n>       login_page.fill_username(username)\n\ntests/test_login_page.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:75: in fill_username\n    self.send_keys_to_element(LoginLocators.username, username)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.login_page.LoginPage object at 0x7f845f153290>\nlocator = ('xpath', '//input[@id=\"username\"]'), data = 'abcdefg'\n\n    def send_keys_to_element(self, locator: tuple[str, str], data: str) -> None:\n        \"\"\"Fills in data into input field.\"\"\"\n>       self.get_element_by_locator(locator).send_keys(data)\nE       AttributeError: 'NoneType' object has no attribute 'send_keys'\n\npages/base_page.py:27: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1744963227511,"stop":1744963227758,"duration":247},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1744963238395,"stop":1744963239020,"duration":625},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    Цель: Проверить авторизацию с некорректными данными\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть страницу с формой\n        2. Ввести данные в поле \"Username\"\n        3. Ввести данные в поле \"Password\"\n        4. Ввести данные в поле \"Username *\"\n        5. Кликнуть в пустую часть страницы\n        6. Проверить, что отображаются сообщения о некорректном вводе\n\n    Ожидаемый результат:\n        - Отображаются соответствующие сообщения об ошибке\n        - Кнопка \"Login\" не активна","status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'send_keys'","statusTrace":"browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"cd5f97ade5144fce7b21d3065181dc48\")>\nusername = 'abcdefg', password = 'ab', username_desc = 'ab'\nusername_error = False, password_error = True, username_desc_error = True\n\n    @allure.severity(severity_level.CRITICAL)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Авторизация\")\n    @allure.testcase(\"Задачи U1, U2\")\n    @allure.story(\"Авторизация с некорректными данными с проверкой ошибок\")\n    @allure.title(\"Авторизация на странице Login Page\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверить авторизацию с некорректными данными\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть страницу с формой\n            2. Ввести данные в поле \"Username\"\n            3. Ввести данные в поле \"Password\"\n            4. Ввести данные в поле \"Username *\"\n            5. Кликнуть в пустую часть страницы\n            6. Проверить, что отображаются сообщения о некорректном вводе\n    \n        Ожидаемый результат:\n            - Отображаются соответствующие сообщения об ошибке\n            - Кнопка \"Login\" не активна\"\"\")\n    @pytest.mark.parametrize('username, password, username_desc, username_error, password_error, username_desc_error',\n                             [('ab', 'abcdefg', 'abcdefg', True, False, False),\n                              ('abcdefg', 'ab', 'abcdefg', False, True, False),\n                              ('abcdefg', 'abcdefg', 'ab', False, False, True),\n                              ('abcdefg', 'ab', 'ab', False, True, True),\n                              ('ab', 'abcdefg', 'ab', True, False, True),\n                              ('ab', 'ab', 'abcdefg', True, True, False),\n                              ('ab', 'ab', 'ab', True, True, True)])\n    def test_log_in_invalid_extended(browser: fixture, username: str, password: str, username_desc: str,\n                                     username_error: bool, password_error: bool, username_desc_error: bool):\n        login_page = LoginPage(browser)\n        login_page.open_login_page()\n>       login_page.fill_username(username)\n\ntests/test_login_page.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:75: in fill_username\n    self.send_keys_to_element(LoginLocators.username, username)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.login_page.LoginPage object at 0x7f845f153290>\nlocator = ('xpath', '//input[@id=\"username\"]'), data = 'abcdefg'\n\n    def send_keys_to_element(self, locator: tuple[str, str], data: str) -> None:\n        \"\"\"Fills in data into input field.\"\"\"\n>       self.get_element_by_locator(locator).send_keys(data)\nE       AttributeError: 'NoneType' object has no attribute 'send_keys'\n\npages/base_page.py:27: AttributeError","steps":[{"name":"Открыть страницу с формой","time":{"start":1744963239022,"stop":1744963240039,"duration":1017},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Ввести данные в поле \"Username\"","time":{"start":1744963240039,"stop":1744963250531,"duration":10492},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'send_keys'\n","statusTrace":"  File \"/ui_tests/pages/login_page.py\", line 75, in fill_username\n    self.send_keys_to_element(LoginLocators.username, username)\n  File \"/ui_tests/pages/base_page.py\", line 27, in send_keys_to_element\n    self.get_element_by_locator(locator).send_keys(data)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1744963250546,"stop":1744963250599,"duration":53},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Smoke тест"},{"name":"story","value":"Авторизация с некорректными данными с проверкой ошибок"},{"name":"severity","value":"critical"},{"name":"feature","value":"Авторизация"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login_page"},{"name":"host","value":"9aa54e51426b"},{"name":"thread","value":"16-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"'ab'"},{"name":"password_error","value":"True"},{"name":"username","value":"'abcdefg'"},{"name":"username_desc","value":"'ab'"},{"name":"username_desc_error","value":"True"},{"name":"username_error","value":"False"}],"links":[{"name":"Задачи U1, U2","url":"Задачи U1, U2","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"5f48177b7009c9cc.json","parameterValues":["'ab'","True","'abcdefg'","'ab'","True","False"]}