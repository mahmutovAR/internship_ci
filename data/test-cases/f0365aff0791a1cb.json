{"uid":"f0365aff0791a1cb","name":"Переход по меню на другие страницы","fullName":"tests.test_failure_screenshot#test_redirect_to_appium_python","historyId":"050c982e024853c3c5cd5085195683a1","time":{"start":1745006116992,"stop":1745006425025,"duration":308033},"description":"\n    Цель: Проверка перехода по меню на другие страницы\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть домашнюю страницу\n        2. Навести курсор на вкладку меню \"All Courses\"\n        3. Проверить переход на страницу\n        4. Проверить значение \"TITLE\"\n        5. Проверить корректность отображения элементов страницы\n\n    Ожидаемый результат:\n        - Происходит переход на страницу\n        - Значение \"TITLE\" соответствует странице\n        - Элементы, уникальные для этой страницы, активны","descriptionHtml":"<pre><code>Цель: Проверка перехода по меню на другие страницы\n\nПредусловие:\n    - Открыть браузер\n\nШаги:\n    1. Открыть домашнюю страницу\n    2. Навести курсор на вкладку меню &quot;All Courses&quot;\n    3. Проверить переход на страницу\n    4. Проверить значение &quot;TITLE&quot;\n    5. Проверить корректность отображения элементов страницы\n\nОжидаемый результат:\n    - Происходит переход на страницу\n    - Значение &quot;TITLE&quot; соответствует странице\n    - Элементы, уникальные для этой страницы, активны\n</code></pre>\n","status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=128.0.6613.137)\nStacktrace:\n#0 0x55e14ecef0ca <unknown>\n#1 0x55e14e9bb2b0 <unknown>\n#2 0x55e14e9a3380 <unknown>\n#3 0x55e14e9a306d <unknown>\n#4 0x55e14e9a1078 <unknown>\n#5 0x55e14e9a187f <unknown>\n#6 0x55e14e9b129b <unknown>\n#7 0x55e14e9c7674 <unknown>\n#8 0x55e14e9ccbab <unknown>\n#9 0x55e14e9a1f8e <unknown>\n#10 0x55e14e9c74cf <unknown>\n#11 0x55e14ea4e08b <unknown>\n#12 0x55e14ea2f6a3 <unknown>\n#13 0x55e14e9fd4f3 <unknown>\n#14 0x55e14e9fe4fe <unknown>\n#15 0x55e14ecb5d7b <unknown>\n#16 0x55e14ecb9d31 <unknown>\n#17 0x55e14eca1c85 <unknown>\n#18 0x55e14ecba8a2 <unknown>\n#19 0x55e14ec86e1f <unknown>\n#20 0x55e14ecdde48 <unknown>\n#21 0x55e14ecde013 <unknown>\n#22 0x55e14ecedebc <unknown>\n#23 0x7efc2b9f2ac3 <unknown>","statusTrace":"browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"337cbb6f9fb6d977fd7780021ebc4457\")>\n\n    @allure.severity(severity_level.MINOR)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Скриншот упавшего теста\")\n    @allure.testcase(\"Задачи U1, U2, U4\")\n    @allure.story(\"При падении теста делается скриншот\")\n    @allure.title(\"Переход по меню на другие страницы\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверка перехода по меню на другие страницы\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть домашнюю страницу\n            2. Навести курсор на вкладку меню \"All Courses\"\n            3. Проверить переход на страницу\n            4. Проверить значение \"TITLE\"\n            5. Проверить корректность отображения элементов страницы\n    \n        Ожидаемый результат:\n            - Происходит переход на страницу\n            - Значение \"TITLE\" соответствует странице\n            - Элементы, уникальные для этой страницы, активны\"\"\")\n    @pytest.mark.xfail\n    def test_redirect_to_appium_python(browser: fixture):\n        menu = Menu(browser)\n        menu.open_homepage()\n        menu.hover_over_all_courses()\n>       menu.assert_redirection_to_appium_python()\n\ntests/test_failure_screenshot.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:71: in assert_redirection_to_appium_python\n    curr_url = self.get_current_url()\npages/base_page.py:31: in get_current_url\n    return self.driver.current_url\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:474: in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3d35620500>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55e14ecde013 \\\\u003Cunknown>\\\\n#22 0x55e14ecedebc \\\\u003Cunknown>\\\\n#23 0x7efc2b9f2ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=128.0.6613.137)\nE       Stacktrace:\nE       #0 0x55e14ecef0ca <unknown>\nE       #1 0x55e14e9bb2b0 <unknown>\nE       #2 0x55e14e9a3380 <unknown>\nE       #3 0x55e14e9a306d <unknown>\nE       #4 0x55e14e9a1078 <unknown>\nE       #5 0x55e14e9a187f <unknown>\nE       #6 0x55e14e9b129b <unknown>\nE       #7 0x55e14e9c7674 <unknown>\nE       #8 0x55e14e9ccbab <unknown>\nE       #9 0x55e14e9a1f8e <unknown>\nE       #10 0x55e14e9c74cf <unknown>\nE       #11 0x55e14ea4e08b <unknown>\nE       #12 0x55e14ea2f6a3 <unknown>\nE       #13 0x55e14e9fd4f3 <unknown>\nE       #14 0x55e14e9fe4fe <unknown>\nE       #15 0x55e14ecb5d7b <unknown>\nE       #16 0x55e14ecb9d31 <unknown>\nE       #17 0x55e14eca1c85 <unknown>\nE       #18 0x55e14ecba8a2 <unknown>\nE       #19 0x55e14ec86e1f <unknown>\nE       #20 0x55e14ecdde48 <unknown>\nE       #21 0x55e14ecde013 <unknown>\nE       #22 0x55e14ecedebc <unknown>\nE       #23 0x7efc2b9f2ac3 <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1745006100198,"stop":1745006100400,"duration":202},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1745006116512,"stop":1745006116989,"duration":477},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    Цель: Проверка перехода по меню на другие страницы\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть домашнюю страницу\n        2. Навести курсор на вкладку меню \"All Courses\"\n        3. Проверить переход на страницу\n        4. Проверить значение \"TITLE\"\n        5. Проверить корректность отображения элементов страницы\n\n    Ожидаемый результат:\n        - Происходит переход на страницу\n        - Значение \"TITLE\" соответствует странице\n        - Элементы, уникальные для этой страницы, активны","status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=128.0.6613.137)\nStacktrace:\n#0 0x55e14ecef0ca <unknown>\n#1 0x55e14e9bb2b0 <unknown>\n#2 0x55e14e9a3380 <unknown>\n#3 0x55e14e9a306d <unknown>\n#4 0x55e14e9a1078 <unknown>\n#5 0x55e14e9a187f <unknown>\n#6 0x55e14e9b129b <unknown>\n#7 0x55e14e9c7674 <unknown>\n#8 0x55e14e9ccbab <unknown>\n#9 0x55e14e9a1f8e <unknown>\n#10 0x55e14e9c74cf <unknown>\n#11 0x55e14ea4e08b <unknown>\n#12 0x55e14ea2f6a3 <unknown>\n#13 0x55e14e9fd4f3 <unknown>\n#14 0x55e14e9fe4fe <unknown>\n#15 0x55e14ecb5d7b <unknown>\n#16 0x55e14ecb9d31 <unknown>\n#17 0x55e14eca1c85 <unknown>\n#18 0x55e14ecba8a2 <unknown>\n#19 0x55e14ec86e1f <unknown>\n#20 0x55e14ecdde48 <unknown>\n#21 0x55e14ecde013 <unknown>\n#22 0x55e14ecedebc <unknown>\n#23 0x7efc2b9f2ac3 <unknown>","statusTrace":"browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"337cbb6f9fb6d977fd7780021ebc4457\")>\n\n    @allure.severity(severity_level.MINOR)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Скриншот упавшего теста\")\n    @allure.testcase(\"Задачи U1, U2, U4\")\n    @allure.story(\"При падении теста делается скриншот\")\n    @allure.title(\"Переход по меню на другие страницы\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверка перехода по меню на другие страницы\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть домашнюю страницу\n            2. Навести курсор на вкладку меню \"All Courses\"\n            3. Проверить переход на страницу\n            4. Проверить значение \"TITLE\"\n            5. Проверить корректность отображения элементов страницы\n    \n        Ожидаемый результат:\n            - Происходит переход на страницу\n            - Значение \"TITLE\" соответствует странице\n            - Элементы, уникальные для этой страницы, активны\"\"\")\n    @pytest.mark.xfail\n    def test_redirect_to_appium_python(browser: fixture):\n        menu = Menu(browser)\n        menu.open_homepage()\n        menu.hover_over_all_courses()\n>       menu.assert_redirection_to_appium_python()\n\ntests/test_failure_screenshot.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:71: in assert_redirection_to_appium_python\n    curr_url = self.get_current_url()\npages/base_page.py:31: in get_current_url\n    return self.driver.current_url\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:474: in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3d35620500>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55e14ecde013 \\\\u003Cunknown>\\\\n#22 0x55e14ecedebc \\\\u003Cunknown>\\\\n#23 0x7efc2b9f2ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=128.0.6613.137)\nE       Stacktrace:\nE       #0 0x55e14ecef0ca <unknown>\nE       #1 0x55e14e9bb2b0 <unknown>\nE       #2 0x55e14e9a3380 <unknown>\nE       #3 0x55e14e9a306d <unknown>\nE       #4 0x55e14e9a1078 <unknown>\nE       #5 0x55e14e9a187f <unknown>\nE       #6 0x55e14e9b129b <unknown>\nE       #7 0x55e14e9c7674 <unknown>\nE       #8 0x55e14e9ccbab <unknown>\nE       #9 0x55e14e9a1f8e <unknown>\nE       #10 0x55e14e9c74cf <unknown>\nE       #11 0x55e14ea4e08b <unknown>\nE       #12 0x55e14ea2f6a3 <unknown>\nE       #13 0x55e14e9fd4f3 <unknown>\nE       #14 0x55e14e9fe4fe <unknown>\nE       #15 0x55e14ecb5d7b <unknown>\nE       #16 0x55e14ecb9d31 <unknown>\nE       #17 0x55e14eca1c85 <unknown>\nE       #18 0x55e14ecba8a2 <unknown>\nE       #19 0x55e14ec86e1f <unknown>\nE       #20 0x55e14ecdde48 <unknown>\nE       #21 0x55e14ecde013 <unknown>\nE       #22 0x55e14ecedebc <unknown>\nE       #23 0x7efc2b9f2ac3 <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: TimeoutException","steps":[{"name":"Открыть домашнюю страницу","time":{"start":1745006116992,"stop":1745006123458,"duration":6466},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Навести курсор на вкладку меню \"All Courses\"","time":{"start":1745006123458,"stop":1745006124510,"duration":1052},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверить переход на страницу","time":{"start":1745006124510,"stop":1745006425024,"duration":300514},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=128.0.6613.137)\nStacktrace:\n#0 0x55e14ecef0ca <unknown>\n#1 0x55e14e9bb2b0 <unknown>\n#2 0x55e14e9a3380 <unknown>\n#3 0x55e14e9a306d <unknown>\n#4 0x55e14e9a1078 <unknown>\n#5 0x55e14e9a187f <unknown>\n#6 0x55e14e9b129b <unknown>\n#7 0x55e14e9c7674 <unknown>\n#8 0x55e14e9ccbab <unknown>\n#9 0x55e14e9a1f8e <unknown>\n#10 0x55e14e9c74cf <unknown>\n#11 0x55e14ea4e08b <unknown>\n#12 0x55e14ea2f6a3 <unknown>\n#13 0x55e14e9fd4f3 <unknown>\n#14 0x55e14e9fe4fe <unknown>\n#15 0x55e14ecb5d7b <unknown>\n#16 0x55e14ecb9d31 <unknown>\n#17 0x55e14eca1c85 <unknown>\n#18 0x55e14ecba8a2 <unknown>\n#19 0x55e14ec86e1f <unknown>\n#20 0x55e14ecdde48 <unknown>\n#21 0x55e14ecde013 <unknown>\n#22 0x55e14ecedebc <unknown>\n#23 0x7efc2b9f2ac3 <unknown>\n\n","statusTrace":"  File \"/ui_tests/pages/home_page.py\", line 71, in assert_redirection_to_appium_python\n    curr_url = self.get_current_url()\n               ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ui_tests/pages/base_page.py\", line 31, in get_current_url\n    return self.driver.current_url\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 474, in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1745006425053,"stop":1745006425105,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"minor"},{"name":"story","value":"При падении теста делается скриншот"},{"name":"epic","value":"Smoke тест"},{"name":"feature","value":"Скриншот упавшего теста"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_failure_screenshot"},{"name":"host","value":"e069509331ef"},{"name":"thread","value":"13-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_failure_screenshot"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Задачи U1, U2, U4","url":"Задачи U1, U2, U4","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"minor","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"f0365aff0791a1cb.json","parameterValues":[]}